syntax = "proto3";

package ares.messaging;

import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
import "Templates/CampaignTemplate.proto";
import "Templates/CommandTemplate.proto";
import "Templates/ExperimentTemplate.proto";
import "Templates/Parameter.proto";
import "Templates/ParameterMetadata.proto";
import "Project.proto";
import "Templates/StepTemplate.proto";
import "ExecutionStatusMessages.proto";

service AresAutomation {
	// Campaigns
	rpc GetAllCampaigns(google.protobuf.Empty) returns (CampaignsResponse);
	rpc GetSingleCampaign(CampaignRequest) returns (CampaignTemplate);
	rpc RemoveCampaign(CampaignRequest) returns (google.protobuf.Empty);
	rpc CampaignExists(CampaignRequest) returns (google.protobuf.BoolValue);
	rpc AddCampaign(CampaignTemplate) returns (google.protobuf.Empty);
	rpc UpdateCampaign(CampaignTemplate) returns (CampaignTemplate);

	// Projects
	rpc GetAllProjects(google.protobuf.Empty) returns (ProjectsResponse); 
	rpc GetProject(ProjectRequest) returns (Project);
	rpc RemoveProject(ProjectRequest) returns (google.protobuf.Empty);
	rpc AddProject(Project) returns (google.protobuf.Empty);

	// Execution

	// informs the execution system of what campaign needs to be executed
	// takes in a campaign request instead of a template as the campaigns need to come from an internal
	// persistence layer as opposed to any template that can be passed in.
	// Returns a campaign template that was selected
	rpc SetCampaignForExecution(CampaignRequest) returns (CampaignTemplate);
	rpc StartExecution(google.protobuf.Empty) returns (google.protobuf.Empty);
	rpc StopExecution(google.protobuf.Empty) returns (google.protobuf.Empty);
	// Gets a stream of experiment execution statuses that can be observed in real time as experiment is running
	// Works best after grabbing all the execution statuses which then lets you know how many experiments have been run
	rpc GetExecutionStatusStream(google.protobuf.Empty) returns (stream ExperimentExecutionStatus);
	// Gets the current status of a campaign execution assuming one is running
	rpc GetCampaignExecutionStatus(google.protobuf.Empty) returns (CampaignExecutionStatusResponse);
}

message RequestById {
	string unique_id = 1; // the unique id of a requested entity
}

message CampaignRequest {
	// provide either a name of unique id for the campaign
	oneof identifier {
		string campaign_name = 1; // name of the requested campaign template
		string unique_id = 2; // id of the requested template
	}
}

message CampaignsResponse {
	repeated CampaignTemplate campaign_templates = 1; // list of campaign templates for a requested campaign name
}

message ProjectRequest {
	string project_name = 1; // name of the requested project
}

message ProjectsResponse {
	repeated Project projects = 1; // list of available projects
}

// separate response so that the status can be null
message CampaignExecutionStatusResponse {
	CampaignExecutionStatus Status = 1;
}