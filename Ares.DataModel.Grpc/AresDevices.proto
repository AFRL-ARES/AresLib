syntax = "proto3";

package ares.messaging.device;

import "google/protobuf/empty.proto";
import "Templates/CommandMetadata.proto";
import "Templates/CommandTemplate.proto";
import "DeviceCommandResult.proto";
import "Device/DeviceStatus.proto";
import "Device/DeviceConfig.proto";

service AresDevices {
	rpc ListAresDevices(google.protobuf.Empty) returns (ListAresDevicesResponse);
	rpc GetServerSerialPorts(google.protobuf.Empty) returns (ListServerSerialPortsResponse);
	rpc GetDeviceStatus(DeviceStatusRequest) returns (DeviceStatus);
	rpc GetCommandMetadatas(CommandMetadatasRequest) returns (CommandMetadatasResponse);
	rpc ExecuteCommand(CommandTemplate) returns (DeviceCommandResult);
	rpc GetAllDeviceConfigs(DeviceConfigRequest) returns (DeviceConfigResponse);
	// rpc AddDeviceConfig(ares.messaging.device.DeviceConfig) returns (google.protobuf.Empty);
	// rpc UpdateDeviceConfig(ares.messaging.device.DeviceConfig) returns (google.protobuf.Empty);
	// rpc RemoveDeviceConfig(.ares.messaging.device.RemoveDeviceConfigRequest) returns (google.protobuf.Empty);
	rpc Activate(DeviceActivateRequest) returns (google.protobuf.Empty);
}

message AresDeviceInfo {
	string name = 1; // Name of the device
	string type = 2; // Type of the device
}

message ListAresDevicesResponse
{
	repeated AresDeviceInfo ares_devices = 1; // collection of ares_device objects, used when all the ares devices are needed
}

message ListServerSerialPortsResponse
{
	repeated string serial_ports = 1; // collection of available serial ports reported by the device connection (local) server
}

message CommandMetadatasRequest {
	string device_name = 1; // device name of the device for which the commands need to be known
}

message CommandMetadatasResponse {
	repeated CommandMetadata metadatas = 1;  // list of command information supported by the requested device
}

message DeviceStatusRequest
{
	string device_name = 1; // device name of the device for which the status needs to be known
}

message DeviceActivateRequest
{
	string device_name = 1; // name of the device to be activated/reactivated
}

//message RemoveDeviceConfigRequest {
//	string config_id = 1; // id of the config to be removed
//}

message DeviceConfigRequest {
	string device_type = 1; // the full type name of the device for which to request the configs, if empty, then all will be returned
}

message DeviceConfigResponse {
	repeated DeviceConfig configs = 1;
}