// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Analysis.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Ares.Core {

  /// <summary>Holder for reflection information generated from Analysis.proto</summary>
  public static partial class AnalysisReflection {

    #region Descriptor
    /// <summary>File descriptor for Analysis.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AnalysisReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5BbmFseXNpcy5wcm90bxIJYXJlcy5jb3JlGhlDb21wbGV0ZWRFeHBlcmlt",
            "ZW50LnByb3RvIm0KCEFuYWx5c2lzEjsKE0NvbXBsZXRlZEV4cGVyaW1lbnQY",
            "ASABKAsyHi5hcmVzLmNvcmUuQ29tcGxldGVkRXhwZXJpbWVudBIOCgZSZXN1",
            "bHQYAiABKAISFAoMQW5hbHl6ZXJOYW1lGAMgASgJYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Ares.Core.CompletedExperimentReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Ares.Core.Analysis), global::Ares.Core.Analysis.Parser, new[]{ "CompletedExperiment", "Result", "AnalyzerName" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Analysis : pb::IMessage<Analysis> {
    private static readonly pb::MessageParser<Analysis> _parser = new pb::MessageParser<Analysis>(() => new Analysis());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Analysis> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ares.Core.AnalysisReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Analysis() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Analysis(Analysis other) : this() {
      completedExperiment_ = other.completedExperiment_ != null ? other.completedExperiment_.Clone() : null;
      result_ = other.result_;
      analyzerName_ = other.analyzerName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Analysis Clone() {
      return new Analysis(this);
    }

    /// <summary>Field number for the "CompletedExperiment" field.</summary>
    public const int CompletedExperimentFieldNumber = 1;
    private global::Ares.Core.CompletedExperiment completedExperiment_;
    /// <summary>
    /// Completed experiment in which data was used to provide result
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ares.Core.CompletedExperiment CompletedExperiment {
      get { return completedExperiment_; }
      set {
        completedExperiment_ = value;
      }
    }

    /// <summary>Field number for the "Result" field.</summary>
    public const int ResultFieldNumber = 2;
    private float result_;
    /// <summary>
    /// Result of the process performed on the completed experiment's output
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "AnalyzerName" field.</summary>
    public const int AnalyzerNameFieldNumber = 3;
    private string analyzerName_ = "";
    /// <summary>
    /// Name of the analyzer providing the process result
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AnalyzerName {
      get { return analyzerName_; }
      set {
        analyzerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Analysis);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Analysis other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CompletedExperiment, other.CompletedExperiment)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Result, other.Result)) return false;
      if (AnalyzerName != other.AnalyzerName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (completedExperiment_ != null) hash ^= CompletedExperiment.GetHashCode();
      if (Result != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Result);
      if (AnalyzerName.Length != 0) hash ^= AnalyzerName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (completedExperiment_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CompletedExperiment);
      }
      if (Result != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Result);
      }
      if (AnalyzerName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AnalyzerName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (completedExperiment_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CompletedExperiment);
      }
      if (Result != 0F) {
        size += 1 + 4;
      }
      if (AnalyzerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AnalyzerName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Analysis other) {
      if (other == null) {
        return;
      }
      if (other.completedExperiment_ != null) {
        if (completedExperiment_ == null) {
          CompletedExperiment = new global::Ares.Core.CompletedExperiment();
        }
        CompletedExperiment.MergeFrom(other.CompletedExperiment);
      }
      if (other.Result != 0F) {
        Result = other.Result;
      }
      if (other.AnalyzerName.Length != 0) {
        AnalyzerName = other.AnalyzerName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (completedExperiment_ == null) {
              CompletedExperiment = new global::Ares.Core.CompletedExperiment();
            }
            input.ReadMessage(CompletedExperiment);
            break;
          }
          case 21: {
            Result = input.ReadFloat();
            break;
          }
          case 26: {
            AnalyzerName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
