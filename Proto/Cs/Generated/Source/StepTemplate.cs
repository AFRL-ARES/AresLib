// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: StepTemplate.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Ares.Core {

  /// <summary>Holder for reflection information generated from StepTemplate.proto</summary>
  public static partial class StepTemplateReflection {

    #region Descriptor
    /// <summary>File descriptor for StepTemplate.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static StepTemplateReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJTdGVwVGVtcGxhdGUucHJvdG8SCWFyZXMuY29yZRoVQ29tbWFuZFRlbXBs",
            "YXRlLnByb3RvImYKDFN0ZXBUZW1wbGF0ZRIMCgROYW1lGAEgASgJEhIKCklz",
            "UGFyYWxsZWwYAiABKAgSNAoQQ29tbWFuZFRlbXBsYXRlcxgDIAMoCzIaLmFy",
            "ZXMuY29yZS5Db21tYW5kVGVtcGxhdGViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Ares.Core.CommandTemplateReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Ares.Core.StepTemplate), global::Ares.Core.StepTemplate.Parser, new[]{ "Name", "IsParallel", "CommandTemplates" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class StepTemplate : pb::IMessage<StepTemplate> {
    private static readonly pb::MessageParser<StepTemplate> _parser = new pb::MessageParser<StepTemplate>(() => new StepTemplate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StepTemplate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ares.Core.StepTemplateReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StepTemplate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StepTemplate(StepTemplate other) : this() {
      name_ = other.name_;
      isParallel_ = other.isParallel_;
      commandTemplates_ = other.commandTemplates_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StepTemplate Clone() {
      return new StepTemplate(this);
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Name identification
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IsParallel" field.</summary>
    public const int IsParallelFieldNumber = 2;
    private bool isParallel_;
    /// <summary>
    /// Flag indicating whether or not commands are to be executed sequentially or in parallel
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsParallel {
      get { return isParallel_; }
      set {
        isParallel_ = value;
      }
    }

    /// <summary>Field number for the "CommandTemplates" field.</summary>
    public const int CommandTemplatesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Ares.Core.CommandTemplate> _repeated_commandTemplates_codec
        = pb::FieldCodec.ForMessage(26, global::Ares.Core.CommandTemplate.Parser);
    private readonly pbc::RepeatedField<global::Ares.Core.CommandTemplate> commandTemplates_ = new pbc::RepeatedField<global::Ares.Core.CommandTemplate>();
    /// <summary>
    /// Collection of (unqalified) command templates used to generate executable (device qualified) commands
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Ares.Core.CommandTemplate> CommandTemplates {
      get { return commandTemplates_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StepTemplate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StepTemplate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (IsParallel != other.IsParallel) return false;
      if(!commandTemplates_.Equals(other.commandTemplates_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (IsParallel != false) hash ^= IsParallel.GetHashCode();
      hash ^= commandTemplates_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (IsParallel != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsParallel);
      }
      commandTemplates_.WriteTo(output, _repeated_commandTemplates_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (IsParallel != false) {
        size += 1 + 1;
      }
      size += commandTemplates_.CalculateSize(_repeated_commandTemplates_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StepTemplate other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.IsParallel != false) {
        IsParallel = other.IsParallel;
      }
      commandTemplates_.Add(other.commandTemplates_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            IsParallel = input.ReadBool();
            break;
          }
          case 26: {
            commandTemplates_.AddEntriesFrom(input, _repeated_commandTemplates_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
