syntax = "proto3";

package ares.messaging;

import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
import "CampaignTemplate.proto";
import "CommandTemplate.proto";
import "ExperimentTemplate.proto";
import "Parameter.proto";
import "ParameterMetadata.proto";
import "Project.proto";
import "StepTemplate.proto";

service AresAutomation {
	// Campaigns
	rpc GetAllCampaigns(google.protobuf.Empty) returns (CampaignsResponse);
	rpc GetSingleCampaign(CampaignRequest) returns (CampaignTemplate);
	rpc RemoveCampaign(CampaignRequest) returns (google.protobuf.Empty);
	rpc CampaignExists(CampaignRequest) returns (google.protobuf.BoolValue);
	rpc AddCampaign(CampaignTemplate) returns (google.protobuf.Empty);
	rpc UpdateCampaign(CampaignTemplate) returns (CampaignTemplate);

	// Projects
	rpc GetAllProjects(google.protobuf.Empty) returns (ProjectsResponse); 
	rpc GetProject(ProjectRequest) returns (Project);
	rpc RemoveProject(ProjectRequest) returns (google.protobuf.Empty);
	rpc AddProject(Project) returns (google.protobuf.Empty);
}

message RequestById {
	string unique_id = 1; // the unique id of a requested entity
}

message CampaignRequest {
	// provide either a name of unique id for the campaign
	oneof identifier {
		string campaign_name = 1; // name of the requested campaign template
		string unique_id = 2; // id of the requested template
	}
}

message CampaignsResponse {
	repeated CampaignTemplate campaign_templates = 1; // list of campaign templates for a requested campaign name
}

message ProjectRequest {
	string project_name = 1; // name of the requested project
}

message ProjectsResponse {
	repeated Project projects = 1; // list of available projects
}
